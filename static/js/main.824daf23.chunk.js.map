{"version":3,"sources":["components/InputTodo.js","components/Li.js","components/TodoList.js","App.js","index.js"],"names":["InputTodo","state","title","error","handleChange","event","setState","target","value","replace","handleKeyPress","key","length","todo","id","uuid","completed","props","addTodo","this","type","className","placeholder","onChange","onKeyPress","cn","Component","Li","deleteTodo","toggleComplited","checked","htmlFor","onClick","TodoList","todos","handleCheckedAll","map","App","filter","prevState","clearComplited","changeFilter","notFinishedTodo","prepTodos","filterTodos","href","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.824daf23.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport uuid from 'uuid/v4';\n\nexport class InputTodo extends Component {\n  state = {\n    title: '',\n    error: false,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      title: event.target.value.replace(/^\\s/, ''),\n    });\n  }\n\n  handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      const { title } = this.state;\n\n      if (this.state.title.length < 7) {\n        this.setState({\n          error: true,\n        });\n\n        return;\n      }\n\n      const todo = {\n        title,\n        id: uuid(),\n        completed: false,\n      };\n\n      this.props.addTodo(todo);\n\n      this.setState({\n        title: '',\n        error: false,\n      });\n    }\n  }\n\n  render() {\n    const { title, error } = this.state;\n\n    return (\n      <>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.handleChange}\n          onKeyPress={this.handleKeyPress}\n          value={title}\n        />\n        <p className={cn('error', { 'error--detected': error })}>\n          Enter todo length more 6 char\n        </p>\n      </>\n    );\n  }\n}\n\nInputTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Li = ({ todo, deleteTodo, toggleComplited }) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <li>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          className=\"toggle\"\n          id={id}\n          onChange={toggleComplited}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button type=\"button\" className=\"destroy\" onClick={deleteTodo} />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nLi.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleComplited: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Li } from './Li';\n\nexport const TodoList = ({\n  todos,\n  deleteTodo,\n  toggleComplited,\n  handleCheckedAll,\n}) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onClick={handleCheckedAll}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    {todos.length > 0 && (\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <Li\n            key={todo.id}\n            todo={todo}\n            deleteTodo={() => deleteTodo(todo.id)}\n            toggleComplited={() => toggleComplited(todo.id)}\n          />\n        ))}\n      </ul>\n    )}\n  </>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleComplited: PropTypes.func.isRequired,\n  handleCheckedAll: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport cn from 'classnames';\nimport { InputTodo } from './components/InputTodo';\nimport { TodoList } from './components/TodoList';\n\nconst filterTodos = (todos, filter) => {\n  switch (filter) {\n    case 'active':\n      return todos.filter(todo => todo.completed === false);\n    case 'completed':\n      return todos.filter(todo => todo.completed === true);\n    default:\n      return todos;\n  }\n};\n\nexport class App extends Component {\n  state = {\n    todos: [],\n    filter: 'all',\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  toggleComplited = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo, completed: !todo.completed,\n          }\n          : todo\n      )),\n    }));\n  }\n\n  handleCheckedAll = (event) => {\n    if (event.target.checked) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo, completed: true,\n        })),\n      }));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo, completed: false,\n        })),\n      }));\n    }\n  }\n\n  clearComplited = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  changeFilter = (event) => {\n    this.setState({\n      filter: event.target.id,\n    });\n  }\n\n  render() {\n    const { todos, filter } = this.state;\n    const notFinishedTodo = todos.filter(todo => todo.completed === false);\n    const prepTodos = filterTodos(todos, filter);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <InputTodo addTodo={this.addTodo} />\n        </header>\n        <section className=\"main\">\n          <TodoList\n            todos={prepTodos}\n            deleteTodo={this.deleteTodo}\n            toggleComplited={this.toggleComplited}\n            handleCheckedAll={this.handleCheckedAll}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${notFinishedTodo.length} items left`}\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                id=\"all\"\n                className={cn({ selected: filter === 'all' })}\n                onClick={this.changeFilter}\n              >\n              All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                id=\"active\"\n                className={cn({ selected: filter === 'active' })}\n                onClick={this.changeFilter}\n              >\n              Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                id=\"completed\"\n                className={cn({ selected: filter === 'completed' })}\n                onClick={this.changeFilter}\n              >\n              Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearComplited}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.scss';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}