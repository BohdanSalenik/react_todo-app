{"version":3,"sources":["components/InputTodo.js","components/ListItem.js","components/TodoList.js","components/NotFinishedTodo.js","components/Filters.js","App.js","index.js"],"names":["InputTodo","state","title","handleChange","event","setState","target","value","replace","handleSubmit","preventDefault","todo","trim","id","uuidv4","completed","props","addTodo","this","onSubmit","type","className","placeholder","onChange","Component","ListItem","deleteTodo","toggleComplited","checked","htmlFor","onClick","TodoList","todos","handleCheckedAll","length","every","map","key","NotFinishedTodo","notFinishedTodo","Filters","filter","changeFilter","data-filter","cn","selected","App","prevState","clearCompleted","getAttribute","preparedTodos","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"wTAIaA,EAAb,2MACEC,MAAQ,CACNC,MAAO,IAFX,EAKEC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZH,MAAOE,EAAME,OAAOC,MAAMC,QAAQ,MAAO,OAP/C,EAWEC,aAAe,SAACL,GACdA,EAAMM,iBADkB,IAIlBC,EAAO,CACXT,MAHgB,EAAKD,MAAfC,MAGOU,OACbC,GAAIC,cACJC,WAAW,GAGb,EAAKC,MAAMC,QAAQN,GAEnB,EAAKN,SAAS,CACZH,MAAO,MAxBb,wEA4BY,IACAA,EAAUgB,KAAKjB,MAAfC,MAER,OACE,0BAAMiB,SAAUD,KAAKT,cACnB,2BACEW,KAAK,OACLC,UAAU,WACVC,YAAY,yBACZC,SAAUL,KAAKf,aACfI,MAAOL,SAtCjB,GAA+BsB,aCDlBC,EAAW,SAAC,GAA2C,IAAzCd,EAAwC,EAAxCA,KAAMe,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,gBACnCd,EAAyBF,EAAzBE,GAAIX,EAAqBS,EAArBT,MAAOa,EAAcJ,EAAdI,UAEnB,OACE,4BACE,yBAAKM,UAAU,QACb,2BACED,KAAK,WACLQ,QAASb,EACTM,UAAU,SACVR,GAAIA,EACJU,SAAUI,IAEZ,2BAAOE,QAAShB,GAAKX,GACrB,4BAAQkB,KAAK,SAASC,UAAU,UAAUS,QAASJ,KAErD,2BAAON,KAAK,OAAOC,UAAU,WCftBU,EAAW,SAAC,GAAD,IACtBC,EADsB,EACtBA,MACAN,EAFsB,EAEtBA,WACAC,EAHsB,EAGtBA,gBACAM,EAJsB,EAItBA,iBAJsB,OAMtB,oCACE,2BACEb,KAAK,WACLP,GAAG,aACHQ,UAAU,aACVO,QAASI,EAAME,QACZF,EAAMG,OAAM,SAAAxB,GAAI,OAAIA,EAAKI,aAC5Be,QAASG,IAEX,2BAAOJ,QAAQ,cAAf,wBACCG,EAAME,OAAS,GACd,wBAAIb,UAAU,aACXW,EAAMI,KAAI,SAAAzB,GAAI,OACb,kBAAC,EAAD,CACE0B,IAAK1B,EAAKE,GACVF,KAAMA,EACNe,WAAY,kBAAMA,EAAWf,EAAKE,KAClCc,gBAAiB,kBAAMA,EAAgBhB,EAAKE,aCxB3CyB,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OAC7B,0BAAMlB,UAAU,cAAhB,UACMkB,EAAgBL,OADtB,iB,gBCAWM,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,aAAX,OAErB,wBAAIrB,UAAU,WACZ,4BACE,4BACED,KAAK,SACLuB,cAAY,MACZtB,UAAWuB,IAAG,CAAEC,SAAqB,QAAXJ,IAC1BX,QAASY,GAJX,QAUF,4BACE,4BACEtB,KAAK,SACLuB,cAAY,SACZtB,UAAWuB,IAAG,CAAEC,SAAqB,WAAXJ,IAC1BX,QAASY,GAJX,WAUF,4BACE,4BACEtB,KAAK,SACLuB,cAAY,YACZtB,UAAWuB,IAAG,CAAEC,SAAqB,cAAXJ,IAC1BX,QAASY,GAJX,gBCbOI,EAAb,2MACE7C,MAAQ,CACN+B,MAAO,GACPS,OAAQ,OAHZ,EAMExB,QAAU,SAACN,GACT,EAAKN,UAAS,SAAA0C,GAAS,MAAK,CAC1Bf,MAAM,GAAD,mBAAMe,EAAUf,OAAhB,CAAuBrB,SARlC,EAYEe,WAAa,SAACb,GACZ,EAAKR,UAAS,SAAA0C,GAAS,MAAK,CAC1Bf,MAAOe,EAAUf,MAAMS,QAAO,SAAA9B,GAAI,OAAIA,EAAKE,KAAOA,UAdxD,EAkBEc,gBAAkB,SAACd,GACjB,EAAKR,UAAS,SAAA0C,GAAS,MAAK,CAC1Bf,MAAOe,EAAUf,MAAMI,KAAI,SAAAzB,GAAI,OAC7BA,EAAKE,KAAOA,EAAZ,eAEOF,EAFP,CAGII,WAAYJ,EAAKI,YAEjBJ,UA1BZ,EA+BEsB,iBAAmB,YAAiB,IAC1BL,EADyB,EAAbtB,OACZsB,QAER,EAAKvB,UAAS,SAAA0C,GAAS,MAAK,CAC1Bf,MAAOe,EAAUf,MAAMI,KAAI,SAAAzB,GAAI,sBAC1BA,EAD0B,CAE7BI,UAAWa,YArCnB,EA0CEoB,eAAiB,WACf,EAAK3C,UAAS,SAAA0C,GAAS,MAAK,CAC1Bf,MAAOe,EAAUf,MAAMS,QAAO,SAAA9B,GAAI,OAAKA,EAAKI,kBA5ClD,EAgDE2B,aAAe,SAACtC,GACd,EAAKC,SAAS,CACZoC,OAAQrC,EAAME,OAAO2C,aAAa,kBAlDxC,wEAsDY,IAAD,EACmB/B,KAAKjB,MAAvB+B,EADD,EACCA,MAAOS,EADR,EACQA,OACTF,EAAkBP,EAAMS,QAAO,SAAA9B,GAAI,OAAKA,EAAKI,aAC7CmC,EApEU,SAAClB,EAAOS,GAC1B,OAAQA,GACN,IAAK,SACH,OAAOT,EAAMS,QAAO,SAAA9B,GAAI,OAAuB,IAAnBA,EAAKI,aACnC,IAAK,YACH,OAAOiB,EAAMS,QAAO,SAAA9B,GAAI,OAAuB,IAAnBA,EAAKI,aACnC,QACE,OAAOiB,GA6DamB,CAAYnB,EAAOS,GAEzC,OACE,6BAASpB,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCAEA,kBAAC,EAAD,CAAWJ,QAASC,KAAKD,WAE3B,6BAASI,UAAU,QACjB,kBAAC,EAAD,CACEW,MAAOkB,EACPxB,WAAYR,KAAKQ,WACjBC,gBAAiBT,KAAKS,gBACtBM,iBAAkBf,KAAKe,oBAI3B,4BAAQZ,UAAU,UAChB,kBAAC,EAAD,CAAiBkB,gBAAiBA,IAClC,kBAAC,EAAD,CAASE,OAAQA,EAAQC,aAAcxB,KAAKwB,eAC5C,4BACEtB,KAAK,SACLC,UAAU,kBACVS,QAASZ,KAAK8B,gBAHhB,yBA9EV,GAAyBxB,aCXzB4B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.36d1d141.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class InputTodo extends Component {\n  state = {\n    title: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      title: event.target.value.replace(/^\\s/, ''),\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title } = this.state;\n\n    const todo = {\n      title: title.trim(),\n      id: uuidv4(),\n      completed: false,\n    };\n\n    this.props.addTodo(todo);\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.handleChange}\n          value={title}\n        />\n      </form>\n    );\n  }\n}\n\nInputTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ListItem = ({ todo, deleteTodo, toggleComplited }) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <li>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          className=\"toggle\"\n          id={id}\n          onChange={toggleComplited}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button type=\"button\" className=\"destroy\" onClick={deleteTodo} />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nListItem.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleComplited: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListItem } from './ListItem';\n\nexport const TodoList = ({\n  todos,\n  deleteTodo,\n  toggleComplited,\n  handleCheckedAll,\n}) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={todos.length\n      && todos.every(todo => todo.completed)}\n      onClick={handleCheckedAll}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    {todos.length > 0 && (\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <ListItem\n            key={todo.id}\n            todo={todo}\n            deleteTodo={() => deleteTodo(todo.id)}\n            toggleComplited={() => toggleComplited(todo.id)}\n          />\n        ))}\n      </ul>\n    )}\n  </>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  toggleComplited: PropTypes.func.isRequired,\n  handleCheckedAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NotFinishedTodo = ({ notFinishedTodo }) => (\n  <span className=\"todo-count\">\n    {`${notFinishedTodo.length} items left`}\n  </span>\n);\n\nNotFinishedTodo.propTypes = {\n  notFinishedTodo: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport const Filters = ({ filter, changeFilter }) => (\n\n  <ul className=\"filters\">\n    <li>\n      <button\n        type=\"button\"\n        data-filter=\"all\"\n        className={cn({ selected: filter === 'all' })}\n        onClick={changeFilter}\n      >\n        All\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        data-filter=\"active\"\n        className={cn({ selected: filter === 'active' })}\n        onClick={changeFilter}\n      >\n        Active\n      </button>\n    </li>\n\n    <li>\n      <button\n        type=\"button\"\n        data-filter=\"completed\"\n        className={cn({ selected: filter === 'completed' })}\n        onClick={changeFilter}\n      >\n        Completed\n      </button>\n    </li>\n  </ul>\n);\n\nFilters.propTypes = {\n  filter: PropTypes.string.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { InputTodo } from './components/InputTodo';\nimport { TodoList } from './components/TodoList';\nimport { NotFinishedTodo } from './components/NotFinishedTodo';\nimport { Filters } from './components/Filters';\n\nconst filterTodos = (todos, filter) => {\n  switch (filter) {\n    case 'active':\n      return todos.filter(todo => todo.completed === false);\n    case 'completed':\n      return todos.filter(todo => todo.completed === true);\n    default:\n      return todos;\n  }\n};\n\nexport class App extends Component {\n  state = {\n    todos: [],\n    filter: 'all',\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  deleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  toggleComplited = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo,\n            completed: !todo.completed,\n          }\n          : todo\n      )),\n    }));\n  }\n\n  handleCheckedAll = ({ target }) => {\n    const { checked } = target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  changeFilter = (event) => {\n    this.setState({\n      filter: event.target.getAttribute('data-filter'),\n    });\n  }\n\n  render() {\n    const { todos, filter } = this.state;\n    const notFinishedTodo = todos.filter(todo => !todo.completed);\n    const preparedTodos = filterTodos(todos, filter);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <InputTodo addTodo={this.addTodo} />\n        </header>\n        <section className=\"main\">\n          <TodoList\n            todos={preparedTodos}\n            deleteTodo={this.deleteTodo}\n            toggleComplited={this.toggleComplited}\n            handleCheckedAll={this.handleCheckedAll}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <NotFinishedTodo notFinishedTodo={notFinishedTodo} />\n          <Filters filter={filter} changeFilter={this.changeFilter} />\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.scss';\r\nimport './index.scss';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}